     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; ...
    14 00000000 64000000                    a dd 100;a=100
    15 00000004 04                          b db 4;b=4
    16 00000005 02                          c db 2;c=2
    17 00000006 0200000000000000            x dq 2;x=2
    18                                      
    19                                      ;(a+b)/(2-b*b+b/c)-x
    20                                      ;(104)/(2-16+2)-2
    21                                      ;(104/-16)-2
    22                                      ;(-6)-2
    23                                      ;-8
    24                                      
    25                                      
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                          ; ...
    30                                          
    31 00000000 B202                            mov dl,2;dl=2
    32 00000002 A0[04000000]                    mov al,[b];al=b
    33 00000007 6698                            cbw;al zu ax konvertieren // al->ax
    34 00000009 F62D[04000000]                  imul byte [b];ax=b*b
    35 0000000F 6689C3                          mov bx,ax;bx=ax=b*b // ax zu befreien um es wieder zu benutzen 
    36 00000012 A0[04000000]                    mov al,[b];al=b
    37 00000017 6698                            cbw;al zu ax konvertieren // al->ax
    38 00000019 F63D[05000000]                  idiv byte [c];ax=b/c
    39 0000001F 6601D8                          add ax,bx;ax=ax*bx=(b*b)+(b/c)
    40 00000022 6689C1                          mov cx,ax;cx=ax=(b*b)+(b/c) // ax zu befreien um es wieder zu benutzen 
    41 00000025 66B80200                        mov ax,2;ax=2
    42 00000029 6629C8                          sub ax,cx;ax=ax-cx=2-(b*b)+(b/c)
    43 0000002C 6689C1                          mov cx,ax;cx=ax=2-(b*b)+(b/c) // ax zu befreien um es wieder zu benutzen 
    44                                          
    45 0000002F 8B1D[00000000]                  mov ebx,[a];ebx=a
    46 00000035 A0[04000000]                    mov al,[b];al=b
    47 0000003A 6698                            cbw;al zu ax konvertieren // al->ax
    48 0000003C 6699                            cwd;ax zu eax konvertieren // ax->eax
    49 0000003E 01D8                            add eax,ebx;eax=eax-ebx=b+a=a+b
    50                                          
    51 00000040 66F7F9                          idiv cx;eax=eax/cx=(a+b)/(2-(b*b)+(b/c))
    52 00000043 99                              cdq;eax zu eax:edx konvertieren // eax->eax:edx
    53 00000044 2B05[06000000]                  sub eax,[x];eax:edx=eax:edx-x=(a+b)/(2-(b*b)+(b/c))-x
    54                                          
    55                                          ; exit(0)
    56 0000004A 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    57 0000004C FF15[00000000]                  call    [exit]       ; call exit to terminate the program
