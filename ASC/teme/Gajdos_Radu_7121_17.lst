     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13 00000000 03                          a db 3;a=2
    14 00000001 0B000000                    b dd 11;b=500
    15 00000005 06                          c db 6;c=2
    16 00000006 E803000000000000            x dq 1000;x=1000
    17                                      
    18                                      ;x-(a*a+b)/(a+c/a)
    19                                      
    20                                      ;Fur a=3,b=11,c=6,x=1000
    21                                      ;1000-(3*3+11)/(3+6/3)
    22                                      ;1000-(9+11)/(3+2)
    23                                      ;1000-(20)/(5)
    24                                      ;1000-4
    25                                      ;996
    26                                  ; our code starts here
    27                                  segment code use32 class=code
    28                                      start:
    29                                      
    30 00000000 A0[05000000]                    mov al,[c];al=c
    31 00000005 B400                            mov ah,0;vorzeichenlose Umwandlung al->ax
    32 00000007 F635[00000000]                  div byte [a];al=c/a
    33 0000000D 0205[00000000]                  add al,[a];al=a+c/a
    34                                          
    35 00000013 88C3                            mov bl,al ;bl=al
    36 00000015 B700                            mov bh,0 ;vorzeichenlose Umwandlung bl->bx
    37                                          ;bx=(a+c/a)
    38                                          
    39 00000017 A0[00000000]                    mov al,[a] ;al=a
    40 0000001C F6E0                            mul al ;al=a*a
    41 0000001E B400                            mov ah,0 ;vorzeichenlose Umwandlung al->ax
    42 00000020 660305[01000000]                add ax,[b] ;ax=a*a+b
    43 00000027 66BA0000                        mov dx,0 ;vorzeichenlose Umwandlung ax->dx:ax
    44                                          ;dx:ax=(a*a+b)
    45                                          
    46 0000002B 66F7F3                          div bx ;dx:ax=(dx:ax / bx)= ((a*a+b)/(a+c/a))
    47 0000002E BB00000000                      mov ebx,0;ebx=0 (so dass register am anfang 0 ist)
    48 00000033 6689C3                          mov bx,ax
    49 00000036 6689D1                          mov cx,dx
    50                                          ;ebx:ecx=dx:ax=(dx:ax / bx)= ((a*a+b)/(a+c/a))
    51                                          
    52 00000039 A1[06000000]                    mov eax,[x+0]
    53 0000003E 8B15[0A000000]                  mov edx,[x+4]
    54                                          ;eax:edx=x
    55                                          
    56 00000044 29D8                            sub eax, ebx;eax:edx=c-(a*a+b)/(a+c/a)
    57                                          
    58                                          
    59                                          
    60                                          
    61                                          
    62                                          
    63                                      
    64                                          ; exit(0)
    65 00000046 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 00000048 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
